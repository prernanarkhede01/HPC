#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

class Graph {
private:
    int numVertices;
    vector<vector<int>> adjacencyList;

public:
    Graph(int vertices) : numVertices(vertices), adjacencyList(vertices) {}

    void addEdge(int src, int dest) {
        adjacencyList[src].push_back(dest);
        adjacencyList[dest].push_back(src);
    }

    void parallelBFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> bfsQueue;

        visited[startVertex] = true;
        bfsQueue.push(startVertex);

        #pragma omp parallel
        {
            while (!bfsQueue.empty()) {
                #pragma omp for nowait
                for (int i = 0; i < bfsQueue.size(); ++i) {
                    int currentVertex;
                    #pragma omp critical
                    {
                        currentVertex = bfsQueue.front();
                        bfsQueue.pop();
                    }

                    cout << currentVertex << " ";

                    #pragma omp for
                    for (auto neighbor : adjacencyList[currentVertex]) {
                        if (!visited[neighbor]) {
                            #pragma omp critical
                            {
                                visited[neighbor] = true;
                                bfsQueue.push(neighbor);
                            }
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int numVertices, numEdges;
    cout << "Enter the number of vertices: ";
    cin >> numVertices;

    Graph graph(numVertices);

    cout << "Enter the number of edges: ";
    cin >> numEdges;

    cout << "Enter the edges (source and destination vertex):" << endl;
    for (int i = 0; i < numEdges; ++i) {
        int src, dest;
        cin >> src >> dest;
        graph.addEdge(src, dest);
    }

    int startVertex;
    cout << "Enter the starting vertex for BFS: ";
    cin >> startVertex;

    cout << "Parallel BFS: ";
    graph.parallelBFS(startVertex);
    cout << endl;

    return 0;
}
