#include <iostream>
#include <vector>
#include <queue>
#include <stack>
#include <omp.h>

using namespace std;

class Graph {
private:
    int numVertices;
    vector<vector<int>> adjacencyList;

public:
    Graph(int vertices) : numVertices(vertices), adjacencyList(vertices) {}

    void addEdge(int src, int dest) {
        adjacencyList[src].push_back(dest);
        adjacencyList[dest].push_back(src);
    }

    void parallelBFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        queue<int> bfsQueue;

        visited[startVertex] = true;
        bfsQueue.push(startVertex);

        #pragma omp parallel
        {
            while (!bfsQueue.empty()) {
                #pragma omp for
                for (int i = 0; i < bfsQueue.size(); ++i) {
                    int currentVertex;
                    #pragma omp critical
                    {
                        currentVertex = bfsQueue.front();
                        bfsQueue.pop();
                    }

                    cout << currentVertex << " ";

                    #pragma omp for
                    for (auto neighbor : adjacencyList[currentVertex]) {
                        if (!visited[neighbor]) {
                            #pragma omp critical
                            {
                                visited[neighbor] = true;
                                bfsQueue.push(neighbor);
                            }
                        }
                    }
                }
            }
        }
    }

    void parallelDFS(int startVertex) {
        vector<bool> visited(numVertices, false);
        stack<int> dfsStack;

        dfsStack.push(startVertex);

        #pragma omp parallel
        {
            while (!dfsStack.empty()) {
                #pragma omp for
                for (int i = 0; i < dfsStack.size(); ++i) {
                    int currentVertex;
                    #pragma omp critical
                    {
                        currentVertex = dfsStack.top();
                        dfsStack.pop();
                    }

                    if (!visited[currentVertex]) {
                        #pragma omp critical
                        {
                            visited[currentVertex] = true;
                        }

                        cout << currentVertex << " ";

                        #pragma omp for
                        for (auto neighbor : adjacencyList[currentVertex]) {
                            dfsStack.push(neighbor);
                        }
                    }
                }
            }
        }
    }
};

int main() {
    int numVertices = 7;
    Graph graph(numVertices);

    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 5);
    graph.addEdge(2, 6);

    cout << "Parallel BFS: ";
    graph.parallelBFS(0);
    cout << endl;

    cout << "Parallel DFS: ";
    graph.parallelDFS(0);
    cout << endl;

    return 0;
}
